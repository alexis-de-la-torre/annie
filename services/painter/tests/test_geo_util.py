import numpy as np
import pytest

from src.geo.Rect import Rect
from src.geo.geo import get_min_bounding_box_points, collision, \
    rects_to_points, get_min_bounding_box_rects, rects_to_sizes, sizes_to_rects
from src.geo.rect_util import flatten_rects

rects = [Rect(269.5254015709299, 308.35764522666244, 25, 25),
         Rect(336.0757465489678, 225.034884505077, 25, 25),
         Rect(291.1053504286575, 406.7092003128319, 25, 25),
         Rect(267.9532731987588, 435.4651042004117, 25, 25),
         Rect(219.46191973556188, 203.37660753031108, 25, 25)]
rects_varied_a = [Rect(269.5254015709299, 308.35764522666244, 75, 100, []),
                  Rect(336.0757465489678, 225.034884505077, 50, 50, []),
                  Rect(267.9532731987588, 435.4651042004117, 50, 75, []),
                  Rect(219.46191973556188, 203.37660753031108, 75, 100, []),
                  Rect(427.86756681983354, 258.73932870002864, 25, 100, [])]
rects_varied_b = [Rect(258.19099182048194, 353.44624972894286, 25, 75, []),
                  Rect(321.5518120475841, 92.36304287511686, 50, 50, []),
                  Rect(338.2530618903667, 239.44016773866298, 50, 100, []),
                  Rect(134.15302442953634, 176.17134036967354, 100, 25, []),
                  Rect(133.55070243793386, 114.5238071539985, 25, 25, [])]
rects_collision = [Rect(280.82901282149317, 367.53190023462395, 50, 50),
                   Rect(263.4649548990691, 389.0988281503088, 50, 50)]
rects_no_collision = [Rect(314.55680991172585, 231.27616337880775, 50, 50),
                      Rect(263.4649548990691, 389.0988281503088, 50, 50)]

points = [(269.5254015709299, 441.4473368931056),
          (336.0757465489678, 369.66342568668944),
          (291.1053504286575, 234.59174490117275),
          (267.9532731987588, 362.2116705145822),
          (219.46191973556188, 97.30977034757329),
          (308.35764522666244, 305.9684085310095),
          (225.034884505077, 107.34131496361856),
          (406.7092003128319, 427.86756681983354),
          (435.4651042004117, 258.73932870002864),
          (203.37660753031108, 215.86477599620943),
          (366.6900152330658, 155.8222448418508),
          (261.55796790116176, 359.69347577368666),
          (277.2178244375729, 232.46013288661942),
          (420.2386553170644, 277.37357954745937),
          (78.41442327915478, 57.51592017454206),
          (84.85171988061629, 297.05419883035086),
          (58.08735897613029, 294.83828908896857),
          (383.0479382191752, 296.77359874990276),
          (361.2627003799402, 427.4992314058497),
          (398.00485929872764, 322.7281196413934)]

sizes = [(25, 25), (25, 25), (25, 25), (25, 25), (25, 25)]
sizes_varied = [(75, 100), (50, 50), (50, 75), (75, 100), (25, 100)]


@pytest.fixture(autouse=True)
def setup():
    np.random.seed(0)


def test_collision_a():
    assert collision(rects_collision[0], [rects_collision[1]]) is True


def test_collision_b():
    assert collision(rects_no_collision[0], [rects_no_collision[1]]) is False


def test_rects_to_sizes():
    assert rects_to_sizes(rects_varied_a) == sizes_varied


def test_sizes_to_rect():
    expected = [Rect(0, 0, 75, 100),
                Rect(0, 0, 50, 50),
                Rect(0, 0, 50, 75),
                Rect(0, 0, 75, 100),
                Rect(0, 0, 25, 100)]

    assert sizes_to_rects(sizes_varied) == expected


def test_rects_to_points():
    # render_points(rects_to_points(rects), "b")
    # show()

    expected = [(269.5254015709299, 308.35764522666244),
                (294.5254015709299, 308.35764522666244),
                (294.5254015709299, 333.35764522666244),
                (269.5254015709299, 333.35764522666244),
                (336.0757465489678, 225.034884505077),
                (361.0757465489678, 225.034884505077),
                (361.0757465489678, 250.034884505077),
                (336.0757465489678, 250.034884505077),
                (291.1053504286575, 406.7092003128319),
                (316.1053504286575, 406.7092003128319),
                (316.1053504286575, 431.7092003128319),
                (291.1053504286575, 431.7092003128319),
                (267.9532731987588, 435.4651042004117),
                (292.9532731987588, 435.4651042004117),
                (292.9532731987588, 460.4651042004117),
                (267.9532731987588, 460.4651042004117),
                (219.46191973556188, 203.37660753031108),
                (244.46191973556188, 203.37660753031108),
                (244.46191973556188, 228.37660753031108),
                (219.46191973556188, 228.37660753031108)]

    assert rects_to_points(rects) == expected


def test_min_bounding_box_points():
    # hull = get_convex_hull(points)

    min_bounding_box = get_min_bounding_box_points(points)

    # render_points(points)
    # render_poly(hull, 'purple', True)
    # render_rects(min_bounding_box, 'red', True)
    # show()

    expected = Rect(58.08735897613029, 57.51592017454206, 377.3777452242814, 383.9314167185636)

    assert min_bounding_box == expected


def test_min_bounding_box_rects():
    # points = rects_to_points(rects)
    # hull = get_convex_hull(points)
    min_bounding_box = get_min_bounding_box_rects(rects)

    # render_rects(rects, "blue")
    # render_points(points, "red")
    # render_poly(hull, "purple", True)
    # render_rects(min_bounding_box, "green", True)
    # show()

    expected = Rect(219.46191973556188,
                    203.37660753031108,
                    141.61382681340592,
                    257.08849667010065)

    assert min_bounding_box == expected


def test_flatten_rects_one_level():
    rect = Rect(0, 0, 200, 100, [Rect(0, 0, 100, 100), Rect(100, 0, 100, 100)])

    flattened = flatten_rects(rect)

    expected = [Rect(0, 0, 100, 100), Rect(100, 0, 100, 100)]

    assert flattened == expected


def test_flatten_rects_two_levels():
    rect = Rect(269.5254015709299,
                308.35764522666244,
                525.0,
                100.0,
                [Rect(269.5254015709299,
                      308.35764522666244,
                      275.00000000000006,
                      100.0,
                      [Rect(269.5254015709299, 308.35764522666244, 75, 100, []),
                       Rect(344.5254015709299, 333.35764522666244, 50, 50, []),
                       Rect(394.5254015709299, 320.85764522666244, 50, 75, []),
                       Rect(444.5254015709299, 308.35764522666244, 75, 100, []),
                       Rect(519.52540157093, 308.35764522666244, 25, 100, [])]),
                 Rect(544.52540157093,
                      308.35764522666244,
                      250.0,
                      100.0,
                      [Rect(544.52540157093, 320.85764522666244, 25, 75, []),
                       Rect(569.52540157093, 333.35764522666244, 50, 50, []),
                       Rect(619.52540157093, 308.35764522666244, 50, 100, []),
                       Rect(669.52540157093, 345.85764522666244, 100, 25, []),
                       Rect(769.52540157093, 345.85764522666244, 25, 25, [])])])

    expected = rect.children[0].children + rect.children[1].children

    assert flatten_rects(rect) == expected
